<!doctype html>
<html lang="pt-Br">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Node Air Combat</title>
    <link rel="stylesheet" href="/css/game.css">
</head>
<body>
    <div id="container">
        <h1><img src="/img/logo.png"></h1>
        <div id="playerStatus1" class="playerStatus" style="float: left;">
            <div class="wait-connect"><p>Conecte o seu smartphone:</p><p>http://[SEU IP]:3000/joystick</p></div>
            <div class="playerStatusConnected">
                <div class="brand"><span>P</span>1</div>
                <div class="health-bar"><div class="health"></div></div>
                <div class="score">Ponto: 0</div>
            </div>
        </div>
        <div id="playerStatus2" class="playerStatus" style="float: right;">
            <div class="wait-connect"><p>Conecte o seu smartphone:</p><p>http://[SEU IP]:3000/joystick</p></div>
            <div class="playerStatusConnected">
                <div class="brand"><span>P</span>2</div>
                <div class="health-bar"><div class="health"></div></div>
                <div class="score">Ponto: 0</div>
            </div>
        </div>
        <div id="gameOver">Game Over</div>
        <canvas id="canvas"></canvas>
    </div>
    <img id="player" src="img/player.png" style="display: none;">
    <audio id="sound_laser_shot" src="/sounds/laser-shot.mp3"></audio>
    <audio id="sound_explosion" src="/sounds/explosion.mp3"></audio>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/canvas.js"></script>
    <script src="/js/sounds.js"></script>
    <script>
        var imageBackgroud = null;
        var imgPlayer = null;
        var imgPlayer2 = null;
        var imgEnemy = null;
        var playersStatus = null;
        var playerOneConnected = false;
        var playerTwoConnected = false;
        async function main() {
            //images
            imageBackgroud = await loadImageBackgroud();
            imgPlayer = await loadImagePlayer();
            imgPlayer2 = await loadImagePlayer2();
            imgEnemy = await loadImageEnemy();

            //sounds
            soundShot = new sound("/sounds/laser-shot.mp3");
            soundExplosion = new sound("/sounds/explosion.mp3");

            //canvas
            canvas.addElement('canvas');
            const socket = io();
            socket.on('game', (game) => {
                playersStatus = game.playersStatus;
                updatePlayersStatus();
                if (game.status === 2) {
                    gameOver();
                }
                let background = [
                    {
                        x: game.background[0].x,
                        y: game.background[0].y
                    },
                    {
                        x: game.background[1].x,
                        y: game.background[1].y
                    }
                ];
                canvas.loadBackground(background);
                canvas.addElements(game.elements);
            });
            canvas.run();
        }

        main();

        function loadImageBackgroud() {
            return new Promise((resolve) => {
                imageBackgroud = new Image();
                imageBackgroud.src = "http://localhost:3000/img/map.png"
                imageBackgroud.onload = () => {
                    resolve(imageBackgroud)
                }
            })
        }

        function loadImagePlayer() {
            return new Promise((resolve) => {
                imgPlayer = new Image();
                imgPlayer.src = "http://localhost:3000/img/player.png"
                imgPlayer.onload = () => {
                    resolve(imgPlayer)
                }
            })
        }

        function loadImagePlayer2() {
            return new Promise((resolve) => {
                imgPlayer2 = new Image();
                imgPlayer2.src = "http://localhost:3000/img/player2.png"
                imgPlayer2.onload = () => {
                    resolve(imgPlayer2)
                }
            })
        }

        function loadImageEnemy() {
            return new Promise((resolve) => {
                imgEnemy = new Image();
                imgEnemy.src = "http://localhost:3000/img/enemy.png"
                imgEnemy.onload = () => {
                    resolve(imgEnemy)
                }
            })
        }

        function updatePlayersStatus() {
            for (let i = 0; i < playersStatus.length; i++) {
                if (i === 0) {
                    let div = document.getElementById("playerStatus1");
                    if (playerOneConnected === false) {
                        div.querySelector(".wait-connect").style.display = "none";
                        div.querySelector(".playerStatusConnected").style.display = "block";
                        div.querySelector(".playerStatusConnected").style.opacity = 1;
                        playerOneConnected = true;
                    }
                    div.querySelector(".health").style.width = playersStatus[i].health+"%";
                    div.querySelector(".score").innerHTML = "Pontos: "+playersStatus[i].score;

                }
                if (i === 1) {
                    let div = document.getElementById("playerStatus2");
                    if (playerTwoConnected === false) {
                        div.querySelector(".wait-connect").style.display = "none";
                        div.querySelector(".playerStatusConnected").style.display = "block";
                        div.querySelector(".playerStatusConnected").style.opacity = 1;
                        playerTwoConnected = true;
                    }
                    div.querySelector(".health").style.width = playersStatus[i].health+"%";
                    div.querySelector(".score").innerHTML = "Pontos: "+playersStatus[i].score;
                }
            }
        }

        function gameOver() {
            let gameOver = document.getElementById("gameOver");
            gameOver.style.display = "block";
        }
    </script>
</body>
</html>
