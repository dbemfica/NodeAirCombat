<!doctype html>
<html lang="pt-Br">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Joystick</title>
    <link rel="stylesheet" href="/css/joystick.css">
  </head>
  <body>
    <div id="container">
        <div id="logo"><img src="/img/logo.png"></div>
        <div id="container_joystick">
            <canvas id="joystick" height="200" width="200"></canvas>
        </div>
        <div id="container_button">
            <button class="butn"></button>
        </div>
    </div>
    
    <script src="/js/jquery-3.4.1.min.js"></script>
    <script src="/js/createjs.min.js"></script>
    <script src="/js/hammer.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
    const socket = io('/joystick');
    var coords = {x: null, y: null, direction: null};
    $(document).ready(function(){
        let xCenter = 100;
        let yCenter = 100;
        let stage = new createjs.Stage('joystick');

        let psp = new createjs.Shape();
        psp.graphics.beginFill('#333333').drawCircle(xCenter, yCenter, 50);

        psp.alpha = 0.25;

        stage.addChild(psp);
        createjs.Ticker.framerate = 60;
        createjs.Ticker.addEventListener('tick', stage);
        stage.update();

        let myElement = $('#joystick')[0];
        let mc = new Hammer(myElement);
        let time = null;

        mc.on("panstart", function(ev) {
            console.log('panstart');
            var pos = $('#joystick').position();
            xCenter = psp.x;
            yCenter = psp.y;
            psp.alpha = 0.5;
            stage.update();
            if (time === null) {
                time = setInterval(() => {
                    move();
                }, 500);
            }
        });

        mc.on("panmove", function(ev) {
            let pos = $('#joystick').position();
            coords = calculateCoords(ev.angle, ev.distance);
            psp.x = coords.x;
            psp.y = coords.y;
            psp.alpha = 0.5;
            stage.update();
        });

        mc.on("panend", function(ev) {
            console.log('panend');
            if (time !== null) {
                clearInterval(time);
            }
            psp.alpha = 0.25;
            createjs.Tween.get(psp).to({x:xCenter,y:yCenter},750,createjs.Ease.elasticOut);
        });

        $(".butn").click(() => {
            socket.emit('fire', true);
        });
    });

    function calculateCoords(angle, distance) {
        let coords = {};
        distance = Math.min(distance, 100);  
        let rads = (angle * Math.PI) / 180.0;

        coords.x = distance * Math.cos(rads);
        coords.y = distance * Math.sin(rads);
        
        if (coords.y < -15 && (coords.x > -25 && coords.x < 25)) {
            coords.direction = 'up';    
        }
        if (coords.y > 15 && (coords.x > -25 && coords.x < 25)) {
            coords.direction = 'down';    
        }
        if (coords.x < -15 && (coords.y > -25 && coords.y < 25)) {
            coords.direction = 'left';    
        }
        if (coords.x > 15 && (coords.y > -25 && coords.y < 25)) {
            coords.direction = 'right';    
        }
        if (coords.x < -15 && coords.y < -15) {
            coords.direction = 'leftUp';    
        }
        if (coords.x > 15 && coords.y < -15) {
            coords.direction = 'rightUp';    
        }
        if (coords.x < -15 && coords.y > 15) {
            coords.direction = 'leftDown';    
        }
        if (coords.x > 15 && coords.y > 15) {
            coords.direction = 'rightDown';    
        }
        return coords;
    }

    function move() {
        let direction = coords.direction;
        console.log(direction)
        if (direction == null) {
            return false;
        }
        if (direction === 'up') {
            socket.emit('moveUp', true);
        }
        if (direction === 'down') {
            socket.emit('moveDown', true);
        }
        if (direction === 'left') {
            socket.emit('moveLeft', true);
        }
        if (direction === 'right') {
            socket.emit('moveRight', true);
        }
        if (direction === 'leftUp') {
            socket.emit('moveLeftUp', true);
        }
        if (direction === 'rightUp') {
            socket.emit('moveRightUp', true);
        }
        if (direction === 'leftDown') {
            socket.emit('moveLeftDown', true);
        }
        if (direction === 'rightDown') {
            socket.emit('moveRightDown', true);
        }
    }
    </script>
  </body>
</html>